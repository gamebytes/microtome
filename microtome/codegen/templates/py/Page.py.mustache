{{#header}}
{{.}}

{{/header}}
# GENERATED IMPORTS START
{{#class_imports}}
from {{package}} import {{name}}
{{/class_imports}}
# GENERATED IMPORTS END

# GENERATED CLASS_DECL START
class {{class_name}}({{superclass}}):
# GENERATED CLASS_DECL END
# GENERATED CONSTRUCTOR START
    _s_inited = False
    def __init__(self, name):
        super({{class_name}}, self).__init__(name)
        if not {{class_name}}._s_inited:
            {{class_name}}._s_inited = True
            {{#props}}
            {{class_name}}._s_{{name}}Spec = PropSpec("{{name}}", {{annotation_text}}, {{#value_type}}[{{#all_typenames}}{{.}}, {{/all_typenames}}]{{/value_type}})
            {{/props}}

        {{#props}}
        self._{{name}} = Prop(self, {{class_name}}._s_{{name}}Spec)
        {{/props}}
# GENERATED CONSTRUCTOR END

# GENERATED PROPS START
    {{#props}}
    {{#value_type.is_pageref}}
    @property
    def {{name}}(self):
        return self._{{name}}.value.page if self._{{name}}.value is not None else None

    @{{name}}.setter
    def {{name}}(self, value):
        self._{{name}}.value = PageRef.from_page(value) if value is not None else None
    {{/value_type.is_pageref}}
    {{^value_type.is_pageref}}
    @property
    def {{name}}(self):
        return self._{{name}}.value

    @{{name}}.setter
    def {{name}}(self, value):
        self._{{name}}.value = value
    {{/value_type.is_pageref}}

    {{/props}}
    @property
    def props(self):
        return super({{class_name}}, self).props + [{{#props}}self._{{name}}, {{/props}}]
# GENERATED PROPS END
